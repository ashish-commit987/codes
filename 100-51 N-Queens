class Solution {
    boolean board[][];
    List<List<String>> result;
    public List<List<String>> solveNQueens(int n) {
        board=new boolean[n][n];
        result=new ArrayList<>();
        helper(0,n);
        return result;
    }
    boolean willIPlaceQueen(int row,int col){
        for(int i=row;i>=0;i--){
            if(board[i][col]){
                return false;
            }
        }
        for(int i=row,j=col;i>=0 && j>=0;i--,j--){
            if(board[i][j]){
                return false;
            }
        }
        for(int i=row,j=col;i>=0 && j<board[0].length;i--,j++){
            if(board[i][j]){
                return false;
            }
        }
        return true;
    }
    void helper(int row,int n){
        if(row==n){
            result.add(convert());
            return;
        }
        //int count=0;
        for(int col=0;col<n;col++){
            if(willIPlaceQueen(row,col)){
                board[row][col]=true;
                helper(row+1,n);
                board[row][col]=false;
            }
        }
        //return count;
    }

    List<String> convert(){
        List<String> a=new ArrayList<>();
        for(int i=0;i<board.length;i++){
            StringBuilder row=new StringBuilder();
            for(int j=0;j<board.length;j++){
                row.append(board[i][j]?'Q':'.');
            }
            a.add(row.toString());
        }
        return a;
    }
}
https://leetcode.com/problems/n-queens/
