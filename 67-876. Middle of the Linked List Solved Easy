/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
// class Solution {
//     public ListNode middleNode(ListNode head) {
//         ListNode temp=head;
//         int count=0;
//         int mid=0;
//         while(temp!=null){
//             count++;
//             temp=temp.next;
//         }
//         mid=count/2;

//         temp=head;
//         for(int i=0;i<mid;i++){
//             temp=temp.next;
//         }
//         return temp;
//     }
// }

//optimal soluution

class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}
https://leetcode.com/problems/middle-of-the-linked-list/
