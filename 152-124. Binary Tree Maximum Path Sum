/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int pathsum=0;
    int maxsum=Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        dfs(root);
        return maxsum;
    }
    public int dfs(TreeNode node){
        if(node==null) return 0;
        int leftgain=Math.max(0,dfs(node.left));
        int rightgain=Math.max(0,dfs(node.right));
        pathsum=node.val+leftgain+rightgain;
        maxsum=Math.max(pathsum,maxsum);
        return node.val+Math.max(leftgain,rightgain);
    }
}
https://leetcode.com/problems/binary-tree-maximum-path-sum/
