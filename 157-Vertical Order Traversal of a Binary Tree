/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        List<int[]> nodes=new ArrayList<>();
        dfs(root,0,0,nodes);
        Collections.sort(nodes,(a,b)->{
            if(a[0]!=b[0]) return a[0]-b[0];
            if(a[1]!=b[1]) return a[1]-b[1];
            return a[2]-b[2];
        });

        List<List<Integer>> result=new ArrayList<>();
        int prevCol=Integer.MIN_VALUE;
        List<Integer> colList=new ArrayList<>();
        for(int[] node:nodes){
            int col=node[0],val=node[2];
            if(col!=prevCol){
                if(!colList.isEmpty()){
                    result.add(colList);
                    colList=new ArrayList<>();
                }
                prevCol=col;
            }
            colList.add(val);
        }
        result.add(colList);
        return result;
    }
    public void dfs(TreeNode root,int row,int col,List<int[]> nodes){
        if(root==null) return;
        nodes.add(new int[]{col,row,root.val});
        dfs(root.left,row+1,col-1,nodes);
        dfs(root.right,row+1,col+1,nodes);
    }
}
https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/
