// class Solution {
//     public int smallestDivisor(int[] nums, int threshold) {
//         int start=1;
        
//         while(true){
//             int sum=0;
//             for(int i=0;i<nums.length;i++){
//             int val=(int)Math.ceil((double)nums[i]/start);
//             sum=sum+val;
//          }
//          if(sum>threshold){
//             start++;
//             }
//             else{
//                 return start;
//             }
//         }
        
//     }
// }

// optimal solution

class Solution {
    public int smallestDivisor(int[] nums, int threshold) {
        int start=1;
        int max=Integer.MIN_VALUE;
        for(int num: nums){
            max=Math.max(max,num);
        }
        int end=max;
        while(start<=end){
            int val=0;
            int sum=0;
            int mid=start+(end-start)/2;
            for(int i=0;i<nums.length;i++){
                val = (int) Math.ceil((double) nums[i] / mid);
                sum+=val;
            }
            if(sum>threshold){
                start=mid+1;
            }
            else{
                end=mid-1;
            }
        }
        return start;
    }
}
https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/
