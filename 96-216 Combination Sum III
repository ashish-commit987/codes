class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
        List<List<Integer>> bigList=new ArrayList<>();
        List<Integer> smallList=new ArrayList<>();
        helper(bigList,smallList,k,n,1,0);
        return bigList;
    }
    public void helper(List<List<Integer>> bigList,List<Integer> smallList,int k, int n,int index,int target){
        if(target==n && smallList.size()==k){
            bigList.add(new ArrayList<Integer>(smallList));
            return;
        }
        if(target>n){
            return;
        }
        for(int i=index;i<=9;i++){
            smallList.add(i);
            helper(bigList,smallList,k,n,i+1,target+i);
            smallList.remove(smallList.size()-1);
        }
    }
}
https://leetcode.com/problems/combination-sum-iii/
