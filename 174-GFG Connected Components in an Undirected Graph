class Solution {
    public ArrayList<ArrayList<Integer>> getComponents(int V, int[][] edges) {
        // code here
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        boolean[] visited=new boolean[V];
        ArrayList<ArrayList<Integer>> result=new ArrayList<>();
        for(int i=0;i<V;i++){
            if(!visited[i]){
                ArrayList<Integer> comp=new ArrayList<>();
                dfs(i,visited,comp,adj);
                result.add(comp);
            }
        }
        return result;
    }
    public void dfs(int i,boolean[] visited,ArrayList<Integer> comp,ArrayList<ArrayList<Integer>> adj){
        visited[i]=true;
        comp.add(i);
        for(int neighbor:adj.get(i)){
            if(!visited[neighbor]){
                dfs(neighbor,visited,comp,adj);
            }
        }
    }
}
https://www.geeksforgeeks.org/problems/connected-components-in-an-undirected-graph/1
