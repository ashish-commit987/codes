/*
class Node
{
    int data;
    Node next;
    Node(int data)
    {
        this.data = data;
        next = null;
    }
}
*/
// class Solution {
//     // Function to sort a linked list of 0s, 1s and 2s.
//     static Node segregate(Node head) {
//         // add your code here
//         if(head==null || head.next==null){
//             return head;
//         }
//         Node mid=getMid(head);
//         Node left=head;
//         Node right=mid;
        
//         left=segregate(left);
//         right=segregate(right);
        
//         return merge(left,right);
//     }
//     static Node getMid(Node head){
//         Node fast=head;
//         Node slow=head;
//         Node prev=null;
//         while(fast!=null && fast.next!=null){
//             prev=slow;
//             slow=slow.next;
//             fast=fast.next.next;
//         }
    
//           prev.next=null; 
        
//         return slow;
//     }
    
//     static Node merge(Node l1, Node l2){
//         Node dummy=new Node(0);
//         Node tail=dummy;
//         while(l1!=null && l2!=null){
//             if(l1.data<l2.data){
//                 tail.next=l1;
//                 l1=l1.next;
//             }
//             else{
//                 tail.next=l2;
//                 l2=l2.next;
//             }
//             tail=tail.next;
//         }
//         if(l1!=null){
//             tail.next=l1;
//             l1=l1.next;
//         }
//         if(l2!=null){
//             tail.next=l2;
//             l2=l2.next;
//         }
//         return dummy.next;
//     }
// }

//optimal solution

class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        // add your code here
        Node zeroD=new Node(0);
        Node oneD=new Node(0);
        Node twoD=new Node(0);
        
        Node zero=zeroD;
        Node one=oneD;
        Node two=twoD;
        
        Node current=head;
        
        while(current!=null){
            if(current.data==0){
                zero.next=current;
                zero=zero.next;
            }
            else if(current.data==1){
                one.next=current;
                one=current;
            }
            else{
                two.next=current;
                two=two.next;
            }
            current=current.next;
        }
        
        zero.next=(oneD.next!=null)?(oneD.next):(twoD.next);
        one.next=twoD.next;
        two.next=null;
        return zeroD.next;
    }
}

https://www.geeksforgeeks.org/problems/given-a-linked-list-of-0s-1s-and-2s-sort-it/1
