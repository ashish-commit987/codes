/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 // Recursive Approach
// class Solution {
//     public List<Integer> postorderTraversal(TreeNode root) {
//         List<Integer> list=new ArrayList<>();
//         postorder(root,list);
//         return list;
//     }
//     public void postorder(TreeNode node,List<Integer> list){
//         if(node==null){
//             return;
//         }
//         postorder(node.left,list);
//         postorder(node.right,list);
//         list.add(node.val);
//     }
// }

// Iterative Approach using 2 Stacks

// class Solution {
//     public List<Integer> postorderTraversal(TreeNode root) {
//         List<Integer> list=new ArrayList<>();
//         if(root==null) return list;
//         Stack<TreeNode> stack1=new Stack<>();
//         Stack<TreeNode> stack2=new Stack<>();
//         stack1.push(root);
//         while(!stack1.isEmpty()){
//             TreeNode node=stack1.pop();
//             stack2.push(node);
//             if(node.left!=null) stack1.push(node.left);
//             if(node.right!=null) stack1.push(node.right);
//         }
//         while(!stack2.isEmpty()){
//             list.add(stack2.pop().val);
//         }
//         return list;
//     }
// }

// Iterative Approach using only 1 Stack

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        if(root==null) return list;
        Stack<TreeNode> stack=new Stack<>();
        TreeNode current=root;
        TreeNode lastProcessed=null;
        while(current!=null || !stack.isEmpty()){
            if(current!=null){
                stack.push(current);
                current=current.left;
            }
            else{
                TreeNode peeknode=stack.peek();
                if(peeknode.right!=null && peeknode.right!=lastProcessed){
                    current=peeknode.right;
                }
                else{
                    list.add(peeknode.val);
                    lastProcessed=stack.pop();
                }
            }
        }
        return list;
    }
}
https://leetcode.com/problems/binary-tree-postorder-traversal/
