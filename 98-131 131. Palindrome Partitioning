class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> bigList=new ArrayList<>();
        List<String> smallList=new ArrayList<>();
        helper(bigList,smallList,0,s); 
        return bigList;
    }
    public void helper(List<List<String>> bigList,List<String> smallList,int index,String s){
        if(s.length()==index){
            bigList.add(new ArrayList<String>(smallList));
            return;
        }
        for(int i=index;i<s.length();i++){
            if(isPalindrome(s,index,i)){
                smallList.add(s.substring(index,i+1));
                helper(bigList,smallList,i+1,s);
                smallList.remove(smallList.size()-1);
            }
            
        }
    }
    public boolean isPalindrome(String s,int start,int end){
        while(start<=end){
            if(s.charAt(start)!=s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}
https://leetcode.com/problems/palindrome-partitioning/description/
