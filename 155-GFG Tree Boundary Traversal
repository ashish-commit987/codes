/*
class Node
{
    int data;
    Node left, right;

    public Node(int d)
    {
        data = d;
        left = right = null;
    }
}
*/

class Solution {
    ArrayList<Integer> boundaryTraversal(Node node) {
        // code here
        ArrayList<Integer> result=new ArrayList<>();
        if(node==null) return result;
        if(!isLeaf(node)) result.add(node.data);
        addLeft(node,result);
        addLeaves(node,result);
        addRight(node,result);
        return result;
    }
    public boolean isLeaf(Node node){
        return (node.left==null && node.right==null);
    }
    public void addLeft(Node node,ArrayList<Integer> list){
        Node current=node.left;
        while(current!=null){
           if(!isLeaf(current)) list.add(current.data);
           if(current.left!=null) current=current.left;
           else current=current.right;
        }
    }
    public void addLeaves(Node node, ArrayList<Integer> list){
        if(node==null) return;
        if(isLeaf(node)){
            list.add(node.data);
            return;
        }
        addLeaves(node.left,list);
        addLeaves(node.right,list);
    }
    public void addRight(Node node, ArrayList<Integer> list){
        ArrayList<Integer> temp=new ArrayList<>();
        Node current=node.right;
        while(current!=null){
            if(!isLeaf(current)) temp.add(current.data);
            if(current.right!=null) current=current.right;
            else current=current.left;
        }
        for(int i=temp.size()-1;i>=0;i--){
            list.add(temp.get(i));
        }
    }
}
https://www.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1
