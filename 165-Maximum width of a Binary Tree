/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 // Using Prebuilt pair in java for queue
// class Solution {
//     public int widthOfBinaryTree(TreeNode root) {
//         if(root==null) return 0;
//         Queue<Pair<TreeNode,Long>> queue=new LinkedList<>();
//         queue.offer(new Pair<>(root,0L));
//         int maxWidth=0;
//         while(!queue.isEmpty()){
//             int size=queue.size();
//             long firstIndex=queue.peek().getValue();
//             long lastIndex=firstIndex;
//             for(int i=0;i<size;i++){
//                 Pair<TreeNode,Long> current=queue.poll();
//                 TreeNode node=current.getKey();
//                 long currentIndex=current.getValue()-firstIndex;
//                 lastIndex=currentIndex;

//                 if(node.left!=null) queue.offer(new Pair<>(node.left,2*currentIndex));
//                 if(node.right!=null) queue.offer(new Pair<>(node.right,2*currentIndex+1));
//             }
//             maxWidth=Math.max(maxWidth,(int)(lastIndex-0+1));
//         }
//         return maxWidth;
//     }
// }

// Creating my own Pair class
// class Solution {
//     class Pair{
//         TreeNode node;
//         long index;
//         Pair(TreeNode node,long index){
//             this.node=node;
//             this.index=index;
//         }
//     }
//     public int widthOfBinaryTree(TreeNode root) {
//         if(root==null) return 0;
//         Queue<Pair> queue=new LinkedList<>();
//         queue.offer(new Pair(root,0L));
//         int maxWidth=0;
//         while(!queue.isEmpty()){
//             int size=queue.size();
//             long firstIndex=queue.peek().index;
//             long lastIndex=firstIndex;
//             for(int i=0;i<size;i++){
//                 Pair current=queue.poll();
//                 TreeNode node=current.node;
//                 long currentIndex=current.index-firstIndex;
//                 lastIndex=currentIndex;

//                 if(node.left!=null) queue.offer(new Pair(node.left,2*currentIndex));
//                 if(node.right!=null) queue.offer(new Pair(node.right,2*currentIndex+1));
//             }
//             maxWidth=Math.max(maxWidth,(int)(lastIndex-0+1));
//         }
//         return maxWidth;
//     }
// }


class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root==null) return 0;
        Deque<Pair<TreeNode,Long>> queue=new LinkedList<>();
        queue.offer(new Pair<>(root,0L));
        int maxWidth=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            long firstIndex=queue.peekFirst().getValue();
            long lastIndex=queue.peekLast().getValue();
            maxWidth=Math.max(maxWidth,(int)(lastIndex-firstIndex+1));
            for(int i=0;i<size;i++){
                Pair<TreeNode,Long> current=queue.poll();
                TreeNode node=current.getKey();

                if(node.left!=null) queue.offer(new Pair<>(node.left,2*current.getValue()));
                if(node.right!=null) queue.offer(new Pair<>(node.right,2*current.getValue()+1));
            }
            
        }
        return maxWidth;
    }
}
https://leetcode.com/problems/maximum-width-of-binary-tree/
