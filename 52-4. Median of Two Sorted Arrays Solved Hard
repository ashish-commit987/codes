// class Solution {
//     public double findMedianSortedArrays(int[] nums1, int[] nums2) {
//         List<Integer> list=new ArrayList<>();
//         for(int num:nums1){
//             list.add(num);
//         }
//         for(int num:nums2){
//             list.add(num);
//         }
//         Collections.sort(list);
//         int n=list.size();
//         int mid=n/2;
//         if(n%2==0){
//             return ((double)list.get(mid)+list.get(mid-1))/2.0;
//         }
//         else{
//             return list.get(mid);
//         }
//     }
// }

// optimal solution also there was one more better solution than naive one which was merge sort but i have not done that

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n1=nums1.length;
        int n2=nums2.length;
        int n=n1+n2;

        if(n1>n2){
            return findMedianSortedArrays(nums2,nums1);
        }
        int left =(n1+n2+1)/2;
        int start=0;
        int end=n1;
        while(start<=end){
            int mid1=(start+end)/2;
            int mid2=left-mid1;
            int l1=(mid1>0)?(nums1[mid1-1]):Integer.MIN_VALUE;
            int l2=(mid2>0)?(nums2[mid2-1]):Integer.MIN_VALUE;
            int r1=(mid1<n1)?(nums1[mid1]):Integer.MAX_VALUE;
            int r2=(mid2<n2)?(nums2[mid2]):Integer.MAX_VALUE;
            if(l1<=r2 && l2<=r1){
                if(n%2==1){
                    return Math.max(l1,l2);
                }
                else{
                    return (double)((Math.max(l1,l2)+Math.min(r1,r2))/2.0);
                }
            }
            if(l1>r2){
                end=mid1-1;
            }
            else{
                start=mid1+1;
            }
        }
        return 0;
    }
}
https://leetcode.com/problems/median-of-two-sorted-arrays/
