/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 //Recursive Approach
// class Solution {
//     public List<Integer> preorderTraversal(TreeNode root) {
//         List<Integer> list=new ArrayList<>();
//         preorder(root,list);
//         return list;
//     }
//     public void preorder(TreeNode node,List<Integer> list){
//         if(node==null){
//             return;
//         }
//         list.add(node.val);
//         preorder(node.left,list);
//         preorder(node.right,list);
//     }
// }

//Iterative approach using stack

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> stack=new Stack<>();
        List<Integer> list=new ArrayList<>();
        if(root==null) return list;
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode node=stack.pop();
            list.add(node.val);
            if(node.right!=null) stack.push(node.right);
            if(node.left!=null) stack.push(node.left);
        }
        return list;
    }    
}
