// public class Solution {
//     public int minDays(int[] bloomDay, int m, int k) {
//         int n = bloomDay.length;
//         if (n < m) return -1; 

//         int min = Integer.MAX_VALUE;
//         int max = Integer.MIN_VALUE;

        
//         for (int day: bloomDay) {
//             min = Math.min(min, day);
//             max = Math.max(max, day);
//         }

//         while (true) {

//             int count = 0, bouquets = 0;

//                 for (int i = 0; i < n; i++) {
//                     if (bloomDay[i] <= min) {
//                         coun t++;
//                         if (count>=k && count%k==0) {
//                             bouquets++;
//                             if (bouquets==m) {
//                                 return min;
//                             }
//                         }
//                     } else {
//                         count = 0; 
//                     }
//                 }

//                 if (bouquets >= m) {
//                     return min; 
//                 }

//                 min++; 
//                 if (min > max) break; 
//         }

//         return -1; 
//     }
// }

//optimal approach

public class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;

        long val = (long) m * k;
        if(val>bloomDay.length){
            return -1;
        }

        for(int num:bloomDay){
            min=Math.min(num,min);
            max=Math.max(num,max);
        }
        int start=min;
        int end=max;
        while(start<=end){
            int mid=start+(end-start)/2;
            int count=0,bouquets=0;
            for(int i=0;i<bloomDay.length;i++){
                if(mid>=bloomDay[i]){
                    count++;
                    if (count>=k && count%k==0) {
                            bouquets++;
                            //count=0;
                    }
                    
                }
                else{
                    count=0;
                    
                }
                if (bouquets >= m) {
                    break; 
                }
            }
            

              if (bouquets >= m) {
                    end=mid-1; 
                }  
                else{
                    start=mid+1;
                }
        }
        return start;
    }
}
https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/
