/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 // Bfs Approach
// class Solution {
//     public boolean isSymmetric(TreeNode root) {
//         Queue<TreeNode> queue=new LinkedList<>();
//         if(root==null) return true;
//         queue.offer(root.left);
//         queue.offer(root.right);
//         while(!queue.isEmpty()){
//             TreeNode t1=queue.poll();
//             TreeNode t2=queue.poll();

//             if(t1==null && t2==null) continue;
//             if(t1==null || t2==null) return false;
//             if(t1.val!=t2.val) return false;
            
//             queue.offer(t1.left);
//             queue.offer(t2.right);

//             queue.offer(t1.right);
//             queue.offer(t2.left);
//         }
//         return true;
//     }
// }

// Dfs approach 
class Solution {
    public boolean isSymmetric(TreeNode root) {
        Queue<TreeNode> queue=new LinkedList<>();
        if(root==null) return true;
        return dfs(root.left,root.right);
    }
    public boolean dfs(TreeNode t1, TreeNode t2){
        if(t1==null && t2==null) return true;
        if(t1==null || t2==null) return false;
        return (t1.val==t2.val) && dfs(t1.left, t2.right) && dfs(t1.right, t2.left);
    }
}
https://leetcode.com/problems/symmetric-tree/
